{"version":3,"sources":["Countdown.js","App.js","serviceWorker.js","index.js"],"names":["countDownDate","Date","getTime","Countdown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","Math","floor","hours","minutes","seconds","_this2","interval","setInterval","now","distance","setState","clearInterval","react_default","a","createElement","className","Component","App","Countdown_Countdown","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAGIA,EAAgB,IAAIC,KAAK,yBAAyBC,UAEjCC,cAEjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACTC,KAAMC,KAAKC,OAAOd,GAAgB,IAAIC,MAAOC,WAA5B,OACjBa,MAAOF,KAAKC,OAAOd,GAAgB,IAAIC,MAAOC,WAA5B,YAClBc,QAASH,KAAKC,OAAOd,GAAgB,IAAIC,MAAOC,WAA5B,UACpBe,QAASJ,KAAKC,OAAOd,GAAgB,IAAIC,MAAOC,WAA5B,IAAuD,MAPrEE,mFAWM,IAAAc,EAAAX,KAEhBA,KAAKY,SAAWC,YAAY,WACxB,IAAIC,GAAM,IAAIpB,MAAOC,UAEjBoB,EAAWtB,EAAgBqB,EAC/BH,EAAKK,SAAS,CAEdX,KAAMC,KAAKC,MAAMQ,EAAQ,OACzBP,MAAOF,KAAKC,MAAOQ,EAAQ,MAAT,MAClBN,QAASH,KAAKC,MAAOQ,EAAQ,KAAT,KACpBL,QAASJ,KAAKC,MAAOQ,EAAQ,IAAkB,QAC9C,oDAILE,cAAcjB,KAAKY,2CAInB,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6DACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2BACXrB,KAAKI,MAAMC,KADhB,IAC4C,IAApBL,KAAKI,MAAMC,KAAc,MAAQ,QAEzDa,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACXrB,KAAKI,MAAMI,MADhB,IAC8C,IAArBR,KAAKI,MAAMI,MAAe,OAAS,SAE5DU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACXrB,KAAKI,MAAMK,QADhB,IACkD,IAAvBT,KAAKI,MAAMK,QAAiB,SAAW,WAElES,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2BACXrB,KAAKI,MAAMM,QADhB,IACkD,IAAvBV,KAAKI,MAAMM,QAAiB,SAAW,mBA7C3CY,aCcxBC,MAbf,WACE,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACI,EAAD,MACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAAb,kBCAII,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b43562b6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n// Set the date we're counting down to\nlet countDownDate = new Date(\"Aug 17, 2019 00:00:00\").getTime();\n\nexport default class Countdown extends Component {\n\n    constructor() {\n        super()\n        // init countdown\n        this.state = {\n            days: Math.floor((countDownDate - new Date().getTime()) / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((countDownDate - new Date().getTime()) % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n            minutes: Math.floor((countDownDate - new Date().getTime()) % (1000 * 60 * 60) / (1000 * 60)),\n            seconds: Math.floor((countDownDate - new Date().getTime()) % (1000 * 60) / 1000)\n        }\n    }\n\n    componentDidMount() {\n        // update countdown every second\n        this.interval = setInterval(() => {\n            let now = new Date().getTime()\n            // Find the distance between now and the count down date\n            let distance = countDownDate - now\n            this.setState({\n            // Time calculations for days, hours, minutes and seconds\n            days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n            minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n            seconds: Math.floor((distance % (1000 * 60)) / 1000),\n        })}, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"container columns is-centered is-size-3 has-text-centered\">\n                <span className='column has-text-primary'>\n                    {this.state.days} {(this.state.days === 1) ? \"day\" : \"days\"}\n                </span>\n                <span className='column has-text-info'>\n                    {this.state.hours} {(this.state.hours === 1) ? \"hour\" : \"hours\"}\n                </span>\n                <span className='column has-text-link'>\n                    {this.state.minutes} {(this.state.minutes === 1) ? \"minute\" : \"minutes\"}\n                </span>\n                <span className='column has-text-success'>\n                    {this.state.seconds} {(this.state.seconds === 1) ? \"second\" : \"seconds\"}\n                </span>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport './App.css'\n// computed sass\nimport './styles.css'\nimport Countdown from './Countdown'\n\nfunction App() {\n  return (\n    <div className=\"app is-family-primary columns is-centered v-centered\">\n        <div className=\"column is-5\">\n            <Countdown/>\n            <div className=\"columns container is-centered\">\n                <p className=\"has-text-dark has-text-centered\">Until Fay!</p>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}